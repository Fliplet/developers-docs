extends ../../../layout

block content
  .jumbotron.hero-3
    .container
      h1.display-3 The component definition
      p Learn about the <kbd>widget.json</kbd> file
  .container
    p The <kbd>widget.json</kbd> file defines your component as well as the <strong>dependencies</strong> and <strong>assets</strong> it needs in order to run.

    p Please note: if you make changes to the <kbd>widget.json</kbd> file, restart the development server (<code>fliplet run</code>) to apply the changes you made.

    p Let's have a look at an example and we'll explain how each section works:

    pre
      code.
        {
          "name": "my Awesome Component",
          "package": "com.example.my-awesome-component",
          "version": "1.0.0",
          "icon": "img/icon.png",
          "tags": [
            "type:component",
            "category:general"
          ],
          "provider_only": false,
          "references": [],
          "html_tag": "span",
          "interface": {
            "dependencies": [
              "fliplet-core",
              "fliplet-studio-ui"
            ],
            "assets": [
              "js/interface.js"
            ]
          },
          "build": {
            "dependencies": [
              "jquery",
              "bootstrap"
            ],
            "assets": [
              "css/build.css"
            ]
          }
        }

    hr
    br
    h2 Each section explained:
    table.table.table-striped
      tbody
        tr
          td
            strong name
          td The title of your component. This will be visible on Fliplet Studio when a user will select a component.

        tr
          td
            strong package
          td
            p A unique string to define your component on Fliplet. It's usually named after your company website and component name but in reverse order.
            p e.g. Given my company website is <strong>example.com</strong> and the component I'm developing is a YouTube Video player, I will use <code>com.example.youtube</code> (or even <code>com.example.video.youtube</code> or <code>com.example.youtube-video</code>).

        tr
          td
            strong version
          td The semantic version of your component.

        tr
          td
            strong icon
          td The relative path to the icon of your component. When available, the icon will be displayed on Fliplet Studio in different parts of the user interface.

        tr
          td
            strong tags
          td
            p Tags are used by both the system and studio to filter components and organise them into different sections.

            ul
              li A component is declared as a <strong>page component</strong> when the default tag <kbd>type:component</kbd> is included.
              li A component becomes an <strong>app component</strong> when the tag <kbd>type:appComponent</kbd> is included.
              li A component becomes unlisted when the none of the two above tags have been set. Therefore, <strong>providers</strong> usually don't include those tags.

        tr
          td
            strong provider_only
          td When set to <code>true</code>, marks the component as a <strong>provider</strong> only, hence cannot be assigned to an app or a screen with an instance. You're most likely to use this with empty <code>tags</code> as specified above.

        tr
          td
            strong references
          td
            p Specifies to the system which settings of the component (when saved with <code>Fliplet.Widget.save</code> to an instance) reference values which should be linked and kept as references.

            p This is extremely important when it comes to app cloning, because the system can understand what data should be moved across and get its references updated.

            p Here's an example taken from Fliplet's <a href="https://github.com/Fliplet/fliplet-widget-primary-button">button component</a>:

            pre
              code.
                {
                  "references": [
                    "action.page:page"
                  ]
                }

            p In a nutshell, the above tells the system that the value at the path `actions.page` in the instance settings is a reference to a page (a screen) of an app.

            p Possible values for the references are:

            ul
              li **page** (a `pageId`)
              li **dataSource** (a `dataSourceId`)

            p Component which uses array or complex objects can use the `$` operator to specify when iterate over arrays of objects. Given your component saves data like the following:

            pre
              code.
                Fliplet.Widget.save({
                  items: [
                    { foo: 1 },
                    { foo: 2 }
                  ]
                });

            p You can use the following references when describing the behaviour of your component:

            pre
              code.
                {
                  "references": [
                    "items.$.foo:page"
                  ]
                }

        tr
          td
            strong html_tag
          td
            p App and page components can optionally output html via the `build.html` template. When doing that, the output is wrapped around a main html tag which also holds some metadata about the component instance. Your definition can specify which tag you want to use. This is mainly to be used with `div` and `span` to declare whether your output is block or inline.

            p Having said that, <strong>any html tag</strong> is allowed to be specified.

        tr
          td
            strong interface
          td
            p Declares `dependencies` and local `assets` to be used from the <a href='./interface'>interface.html</a>.
            p Please read our documentation about [dependencies and assets](../Dependencies-and-assets) for more details.

        tr
          td
            strong build
          td Declares `dependencies` and local `assets` to be used from the **build.html** output. Please read our documentation about [dependencies and assets](../Dependencies-and-assets) for more details.