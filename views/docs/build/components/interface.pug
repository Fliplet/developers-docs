extends ../../../layout

block content
  .jumbotron.hero-3
    .container
      h1.display-3 Components interface
      p Learn about how components define their interface to configure settings
  .container

    p Components usually define interfaces to let their instances <strong>save settings</strong>.
    p A quick example is the interface of the button component to let you specify the button label and the action to be fired or page to view once tapped:
    p
      img(src='/img/component-interface.jpg')
    p In the above example, the button component is also using the link provider to select an action for the button.
    p Both page components and app components can have an interface, although it is not required.
    hr
    br

    h2 The template (interface.html)

    p The interface consists in a html template which gets parsed and compiled via <a href="http://handlebarsjs.com/">Handlebars</a>, plus any other asset (like CSS and JS files, though they don't get compiled).

    p Your template will get available in the view all settings that have been previously saved in the instance as handlebars variables. You can also print the component unique id using the <code>{{ id }}</code> variable.

    p Example:


    pre
      code.
        &lt;p&gt;{{ foo }}&lt;/p&gt;

        {{#if url}}
          &lt;video src="{{ url }}" data-my-component-id="{{ id }}"&gt;&lt;/video&gt;
        {{/if}}
    hr
    br

    h2 Saving the settings

    p Saving an instance settings is done using the public method `Fliplet.Widget.save` found in the `fliplet-core` package:

    pre
      code.
        // Returns a promise
        Fliplet.Widget.save({
          foo: 'bar',
          url: 'funny-cats.mp4',
          hello: {
            world: true
          }
        });

    hr
    br

    h2 Reading previously saved settings

    p Your component interface can be reopened if the component output is clicked via the screen preview by the Fliplet Studio user. Once the interface is reopened, you're responsible for reading the previously saved settings and repopulate your interface.

    p Data for the interface can be retrieved using the `Fliplet.Widget.getData` method from `fliplet-core` as follows:

    pre
      code.
        var data = Fliplet.Widget.getData();
        // data.foo is 'bar'

    hr
    br

    h2 UI design

    p Although it isn't required, we recommend using our design patterns and styles when developing components. We have made a nice package called <kbd>fliplet-studio-ui</kbd> which contains most of the styles we use on our interfaces.

    p Here's a sample of the interface for the button component:

    pre
      code.
        &lt;div&gt;
         &lt;form class="form-horizontal"&gt;
           &lt;header&gt;
             &lt;p&gt;Configure your primary button&lt;/p&gt;
             &lt;a id="help_tip" href="#"&gt;Need help?&lt;/a&gt;
           &lt;/header&gt;
           &lt;div class="form-group clearfix"&gt;
             &lt;div class="col-sm-4 control-label"&gt;
               &lt;label for="primaryButtonLabel"&gt;Button label&lt;/label&gt;
             &lt;/div&gt;
             &lt;div class="col-sm-8"&gt;
               &lt;input type="text" name="name" class="form-control" id="primaryButtonLabel" placeholder="Label" value="{{label}}" required /&gt;
             &lt;/div&gt;
           &lt;/div&gt;
         &lt;/form&gt;
        &lt;/div&gt;

    hr
    br

    .row
      .col-6
        .card
          .card-body
            h2 Including providers

            p Components can include other components (if marked as providers) to add more functionalities or gather data from different sources.

            a.btn.btn-primary(href='#') Using providers »

      .col-6
        .card
          .card-body
            h2 Output of components

            p Once you're familiar with the above documentation on the component interface, have a read to the next section which covers the output of components.

            a.btn.btn-primary(href='#') Read more »